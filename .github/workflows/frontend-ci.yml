# GitHub Actions ワークフロー設定ファイル
# 日報作成支援ツールのフロントエンド（React+Vite+TypeScript）のCI/CD
name: Frontend CI/CD

on:
  push:
    branches: [main]
    paths:
      - "frontend/**"
      - ".github/workflows/frontend-ci.yml"

  pull_request:
    branches: [main]
    paths:
      - "frontend/**"
      - ".github/workflows/frontend-ci.yml"

jobs:
  # CIジョブ（静的解析＋テスト実行）- PRとmainブランチ両方で実行
  ci:
    name: ci-job
    runs-on: ubuntu-latest
    # デプロイジョブが参照できるよう出力を定義
    outputs:
      ci_success: ${{ steps.ci-results.outputs.ci_success }}
    env:
      NODE_VERSION: "20"
      WORKING_DIR: "frontend"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "${{ env.WORKING_DIR }}/package-lock.json"

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo "📦 依存関係をインストール中..."
          npm ci

      - name: Run ESLint
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo "🔍 静的解析（ESLint）を実行中..."
          npm run lint 2>&1 | tee eslint-results.log
        continue-on-error: true
        id: eslint

      - name: Run TypeScript type check
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo "📝 TypeScript型チェックを実行中..."
          npx tsc --noEmit 2>&1 | tee typecheck-results.log
        continue-on-error: true
        id: typecheck

      - name: Run tests
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo "🧪 テストを実行中..."
          npm run test 2>&1 | tee test-results.log
        continue-on-error: true
        id: test

      - name: Build project
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo "🏗️ プロジェクトをビルド中..."
          npm run build 2>&1 | tee build-results.log
        continue-on-error: true
        id: build

      - name: Upload results as artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ci-results-${{ github.run_number }}
          path: |
            ${{ env.WORKING_DIR }}/eslint-results.log
            ${{ env.WORKING_DIR }}/typecheck-results.log
            ${{ env.WORKING_DIR }}/test-results.log
            ${{ env.WORKING_DIR }}/build-results.log
          retention-days: 30

      - name: Create result summary
        if: always()
        run: |
          echo "## 📊 CI実行結果サマリー" >> $GITHUB_STEP_SUMMARY
          echo "| ステップ | 結果 |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|------|" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.eslint.outcome }}" == "success" ]; then
            echo "| ESLint | ✅ 成功 |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| ESLint | ❌ 失敗 |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ steps.typecheck.outcome }}" == "success" ]; then
            echo "| TypeScript型チェック | ✅ 成功 |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| TypeScript型チェック | ❌ 失敗 |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ steps.test.outcome }}" == "success" ]; then
            echo "| テスト | ✅ 成功 |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| テスト | ❌ 失敗 |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ steps.build.outcome }}" == "success" ]; then
            echo "| ビルド | ✅ 成功 |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| ビルド | ❌ 失敗 |" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "詳細なログは「Artifacts」からダウンロードできます。" >> $GITHUB_STEP_SUMMARY

      # CI結果をjobの出力として設定（デプロイジョブで参照用）
      - name: Set CI results as outputs
        id: ci-results
        if: always()
        run: |
          if [ "${{ steps.eslint.outcome }}" == "success" ] && \
             [ "${{ steps.typecheck.outcome }}" == "success" ] && \
             [ "${{ steps.test.outcome }}" == "success" ] && \
             [ "${{ steps.build.outcome }}" == "success" ]; then
            echo "ci_success=true" >> $GITHUB_OUTPUT
            echo "✅ すべてのチェックが正常に完了しました！"
          else
            echo "ci_success=false" >> $GITHUB_OUTPUT
            echo "❌ いずれかのステップが失敗しました。詳細はログを確認してください。"
          fi

      # CI失敗時のみジョブを失敗させる
      - name: Final CI check
        if: always()
        run: |
          if [ "${{ steps.ci-results.outputs.ci_success }}" != "true" ]; then
            echo "CI checks failed. Stopping workflow."
            exit 1
          fi

  # デプロイジョブ - mainブランチへのpushかつCIが成功した場合のみ実行
  deploy:
    name: deploy-job
    runs-on: ubuntu-latest
    # CIジョブが完了してから実行
    needs: ci
    # mainブランチへのpushかつCIが成功した場合のみ実行
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && needs.ci.outputs.ci_success == 'true'
    env:
      NODE_VERSION: "20"
      WORKING_DIR: "frontend"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "${{ env.WORKING_DIR }}/package-lock.json"

      # AWS認証情報の診断
      - name: Debug AWS credentials
        run: |
          echo "🔍 AWS認証情報の診断中..."
          echo "AWS_ACCESS_KEY_ID exists: ${{ secrets.AWS_ACCESS_KEY_ID != '' }}"
          echo "AWS_SECRET_ACCESS_KEY exists: ${{ secrets.AWS_SECRET_ACCESS_KEY != '' }}"
          
          # アクセスキーIDの最初の4文字のみ表示（セキュリティ考慮）
          if [ -n "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
            echo "AWS_ACCESS_KEY_ID prefix: $(echo '${{ secrets.AWS_ACCESS_KEY_ID }}' | cut -c1-4)***"
          else
            echo "❌ AWS_ACCESS_KEY_ID が設定されていません"
          fi

      # AWS認証設定
      - name: Configure AWS credentials
        id: aws-auth
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # GitHub SecretsにAWSの認証情報を設定
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1 # 東京リージョン
        continue-on-error: true

      # AWS認証確認
      - name: Verify AWS credentials
        if: steps.aws-auth.outcome == 'success'
        run: |
          echo "🔐 AWS認証を確認中..."
          aws sts get-caller-identity
          echo "✅ AWS認証成功"

      # 認証失敗時の詳細情報
      - name: AWS authentication failed
        if: steps.aws-auth.outcome == 'failure'
        run: |
          echo "❌ AWS認証に失敗しました"
          echo "🔧 修正手順:"
          echo "1. GitHub リポジトリ → Settings → Secrets and variables → Actions"
          echo "2. 以下のSecretsを追加:"
          echo "   - AWS_ACCESS_KEY_ID: AWSアクセスキーID"
          echo "   - AWS_SECRET_ACCESS_KEY: AWSシークレットアクセスキー"
          echo "3. IAMユーザーがプログラマティックアクセス有効か確認"
          exit 1

      # デプロイスクリプトの存在確認と実行権限付与
      - name: Verify and prepare deploy script
        run: |
          if [ ! -f "./scripts/deploy-frontend.sh" ]; then
            echo "❌ デプロイスクリプトが見つかりません: ./scripts/deploy-frontend.sh"
            exit 1
          fi
          chmod +x ./scripts/deploy-frontend.sh
          echo "✅ デプロイスクリプトの準備完了"

      # デプロイ実行
      - name: Deploy to AWS
        run: |
          echo "🚀 AWS環境へのデプロイを開始..."
          ./scripts/deploy-frontend.sh
        id: deploy

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "❌ デプロイが失敗しました。ログを確認してください。"
          # Slack通知例（必要に応じて追加）
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"❌ フロントエンドデプロイ失敗\n詳細: GitHub Actions"}' \
          #   ${{ secrets.SLACK_WEBHOOK_URL }}

      # デプロイ結果サマリー
      - name: Create deployment summary
        if: always()
        run: |
          echo "## 🚀 デプロイ結果サマリー" >> $GITHUB_STEP_SUMMARY
          echo "| 項目 | 値 |" >> $GITHUB_STEP_SUMMARY
          echo "|------|----|" >> $GITHUB_STEP_SUMMARY
          echo "| デプロイ先 | https://kouhei-portfolio.net |" >> $GITHUB_STEP_SUMMARY
          echo "| コミットSHA | ${{ github.sha }} |" >> $GITHUB_STEP_SUMMARY
          echo "| デプロイ日時 | $(date '+%Y-%m-%d %H:%M:%S') |" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.deploy.outcome }}" == "success" ]; then
            echo "| 結果 | ✅ 成功 |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 結果 | ❌ 失敗 |" >> $GITHUB_STEP_SUMMARY
          fi
