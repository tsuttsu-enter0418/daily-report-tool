# Backend CD Pipeline - Main branch deployment
name: Backend CD

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-*.yml'
  workflow_dispatch:  # 手動実行も可能

env:
  JAVA_VERSION: '17'
  AWS_REGION: 'ap-northeast-1'
  ECR_REPOSITORY: 'daily-report-backend'
  ECS_CLUSTER: 'daily-report-cluster'
  ECS_SERVICE: 'daily-report-task-service'
  ECS_TASK_DEFINITION: 'daily-report-task'

jobs:
  # ==========================================
  # Job 1: ビルド・ECRプッシュ
  # ==========================================
  build-and-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    outputs:
      image-uri: ${{ steps.build-image.outputs.image-uri }}
      image-tag: ${{ steps.meta.outputs.tags }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build application
        working-directory: ./backend
        run: |
          ./mvnw clean package -DskipTests \
            -Dspring.profiles.active=production

      - name: Build and push Docker image
        id: build-image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          target: production

      - name: Set image URI output
        id: set-output
        run: |
          IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}"
          echo "image-uri=${IMAGE_URI}" >> $GITHUB_OUTPUT
          echo "Built and pushed: ${IMAGE_URI}"

      - name: Scan image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.set-output.outputs.image-uri }}
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

  # ==========================================
  # Job 2: ECS タスク定義更新
  # ==========================================
  update-task-definition:
    name: Update ECS Task Definition
    runs-on: ubuntu-latest
    needs: build-and-push
    outputs:
      task-definition-arn: ${{ steps.deploy.outputs.task-definition-arn }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download current task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.ECS_TASK_DEFINITION }} \
            --query taskDefinition > task-definition.json

      - name: Update task definition with new image
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: daily-report-app
          image: ${{ needs.build-and-push.outputs.image-uri }}

      - name: Deploy to Amazon ECS
        id: deploy
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
          wait-for-minutes: 10

  # ==========================================
  # Job 3: デプロイメント検証
  # ==========================================
  verify-deployment:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: [build-and-push, update-task-definition]
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Wait for ECS service stability
        run: |
          echo "Waiting for ECS service to reach stable state..."
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }}

      - name: Verify service health
        run: |
          # ECSサービスの状態確認
          SERVICE_STATUS=$(aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --query 'services[0].{desired:desiredCount,running:runningCount,pending:pendingCount}' \
            --output json)
          
          echo "Service Status: $SERVICE_STATUS"
          
          DESIRED=$(echo $SERVICE_STATUS | jq -r '.desired')
          RUNNING=$(echo $SERVICE_STATUS | jq -r '.running')
          PENDING=$(echo $SERVICE_STATUS | jq -r '.pending')
          
          if [ "$RUNNING" -eq "$DESIRED" ] && [ "$PENDING" -eq 0 ]; then
            echo "✅ Service is healthy: $RUNNING/$DESIRED tasks running"
          else
            echo "❌ Service is unhealthy: $RUNNING/$DESIRED running, $PENDING pending"
            exit 1
          fi

      - name: Health check API endpoints
        run: |
          # APIエンドポイントのヘルスチェック
          echo "Testing API health endpoints..."
          
          # ヘルスチェックエンドポイント
          HEALTH_URL="https://api.kouhei-portfolio.net/actuator/health"
          
          for i in {1..5}; do
            echo "Health check attempt $i/5..."
            
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $HEALTH_URL || echo "000")
            
            if [ "$HTTP_STATUS" -eq 200 ]; then
              echo "✅ Health check passed (HTTP $HTTP_STATUS)"
              break
            else
              echo "⚠️ Health check failed (HTTP $HTTP_STATUS), retrying in 30s..."
              sleep 30
            fi
            
            if [ $i -eq 5 ]; then
              echo "❌ Health check failed after 5 attempts"
              exit 1
            fi
          done

      - name: Smoke tests
        run: |
          # 基本的なAPI機能テスト
          echo "Running smoke tests..."
          
          # 認証エンドポイントテスト（403が正常）
          AUTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://api.kouhei-portfolio.net/api/auth/test)
          if [ "$AUTH_STATUS" -eq 403 ]; then
            echo "✅ Auth endpoint responding correctly (HTTP $AUTH_STATUS)"
          else
            echo "❌ Auth endpoint unexpected response (HTTP $AUTH_STATUS)"
            exit 1
          fi
          
          echo "✅ All smoke tests passed"

  # ==========================================
  # Job 4: 通知・クリーンアップ
  # ==========================================
  notify-and-cleanup:
    name: Notify and Cleanup
    runs-on: ubuntu-latest
    needs: [build-and-push, update-task-definition, verify-deployment]
    if: always()
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get deployment info
        if: needs.update-task-definition.result == 'success'
        run: |
          # 最新のタスク定義情報取得
          TASK_DEF_INFO=$(aws ecs describe-task-definition \
            --task-definition ${{ needs.update-task-definition.outputs.task-definition-arn }} \
            --query 'taskDefinition.{family:family,revision:revision,status:status}' \
            --output json)
          
          echo "TASK_DEF_INFO=$TASK_DEF_INFO" >> $GITHUB_ENV

      - name: Slack notification
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          custom_payload: |
            {
              text: "Backend Deployment Result",
              attachments: [{
                color: '${{ job.status }}' === 'success' ? 'good' : 'danger',
                blocks: [{
                  type: 'section',
                  text: {
                    type: 'mrkdwn',
                    text: `*Backend Deployment* ${{ job.status == 'success' && '✅ Success' || '❌ Failed' }}
                    
                    *Repository:* \`${{ github.repository }}\`
                    *Branch:* \`${{ github.ref_name }}\`
                    *Commit:* <${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|\`${{ github.sha }}\`>
                    *Image:* \`${{ needs.build-and-push.outputs.image-uri }}\`
                    *ECS Cluster:* \`${{ env.ECS_CLUSTER }}\`
                    *ECS Service:* \`${{ env.ECS_SERVICE }}\`
                    
                    *View Details:* <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|GitHub Actions>`
                  }
                }]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Clean up old ECR images
        if: needs.build-and-push.result == 'success'
        run: |
          echo "Cleaning up old ECR images..."
          
          # 最新10個以外のイメージを削除
          aws ecr list-images \
            --repository-name ${{ env.ECR_REPOSITORY }} \
            --filter tagStatus=TAGGED \
            --query 'imageIds[?imageTag!=`latest`]' \
            --output json > all_images.json
          
          # 作成日時でソートして古いものから削除
          IMAGES_TO_DELETE=$(cat all_images.json | jq -r '.[10:] | map(.imageDigest) | join(" ")')
          
          if [ ! -z "$IMAGES_TO_DELETE" ] && [ "$IMAGES_TO_DELETE" != " " ]; then
            echo "Deleting old images..."
            for digest in $IMAGES_TO_DELETE; do
              aws ecr batch-delete-image \
                --repository-name ${{ env.ECR_REPOSITORY }} \
                --image-ids imageDigest=$digest
            done
          else
            echo "No old images to delete"
          fi

      - name: Update deployment status
        if: always()
        run: |
          if [ "${{ needs.verify-deployment.result }}" == "success" ]; then
            echo "🚀 Deployment completed successfully!"
            echo "✅ Image: ${{ needs.build-and-push.outputs.image-uri }}"
            echo "✅ Task Definition: ${{ needs.update-task-definition.outputs.task-definition-arn }}"
            echo "✅ Service URL: https://api.kouhei-portfolio.net"
          else
            echo "❌ Deployment failed!"
            echo "Check the logs for details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            exit 1
          fi