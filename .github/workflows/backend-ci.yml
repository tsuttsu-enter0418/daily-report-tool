# Backend CI Pipeline - Pull Request時の検証
name: Backend CI

on:
  pull_request:
    paths:
      - 'backend/**'
      - '.github/workflows/backend-*.yml'
    branches: [ main, develop ]

env:
  JAVA_VERSION: '17'
  MAVEN_OPTS: '-Xmx3072m'

jobs:
  # ==========================================
  # Job 1: コード品質・セキュリティ検証
  # ==========================================
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # SonarQube用の履歴取得

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Compile and validate
        working-directory: ./backend
        run: |
          ./mvnw clean compile
          ./mvnw validate

      - name: Run Checkstyle
        working-directory: ./backend
        run: ./mvnw checkstyle:check

      - name: Security vulnerability scan
        working-directory: ./backend
        run: ./mvnw org.owasp:dependency-check-maven:check

      - name: SonarQube analysis
        working-directory: ./backend
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./mvnw sonar:sonar \
            -Dsonar.projectKey=daily-report-tool-backend \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.organization=your-org

  # ==========================================
  # Job 2: ユニット・統合テスト
  # ==========================================
  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    permissions:
      checks: write
      pull-requests: write
      contents: read
    

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run Unit Tests
        working-directory: ./backend
        env:
          SPRING_PROFILES_ACTIVE: test
        run: |
          ./mvnw test \
            -Dspring.jpa.hibernate.ddl-auto=create-drop \
            -Djunit.jupiter.execution.parallel.enabled=false

      - name: Run Integration Tests
        working-directory: ./backend
        env:
          SPRING_PROFILES_ACTIVE: test
        run: |
          ./mvnw verify \
            -Dspring.jpa.hibernate.ddl-auto=create-drop \
            -Dtest=**/integration/**/*Test

      - name: Generate Test Reports
        working-directory: ./backend
        if: always()
        run: ./mvnw jacoco:report

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            backend/target/surefire-reports/
            backend/target/failsafe-reports/
            backend/target/site/jacoco/

      - name: Publish Test Results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: JUnit Test Results
          path: 'backend/target/surefire-reports/*.xml'
          reporter: java-junit

      - name: Code Coverage Comment
        if: github.event_name == 'pull_request'
        uses: 5monkeys/cobertura-action@master
        with:
          path: backend/target/site/jacoco/jacoco.xml
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          minimum_coverage: 80



  # ==========================================
  # Job 3: Dockerイメージビルド検証
  # ==========================================
  docker-build-test:
    name: Docker Build Validation
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_DB: daily_report_tool_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (test only)
        working-directory: ./backend
        run: |
          docker build \
            --target production \
            --tag daily-report-backend:test \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            .

      - name: Test Docker image
        run: |
          # PostgreSQL接続確認
          echo "=== PostgreSQL接続確認 ==="
          pg_isready -h localhost -p 5432 -U test_user || echo "PostgreSQL not ready"
          
          # ホストIPアドレス取得（GitHub Actions Linux環境対応）
          HOST_IP=$(ip route show default | awk '/default/ {print $3}')
          echo "Host IP: $HOST_IP"
          
          # コンテナが正常に起動するかテスト（PostgreSQL接続）
          echo "=== Dockerコンテナ起動 ==="
          docker run --rm -d \
            --name test-container \
            -p 8080:8080 \
            --add-host=database:$HOST_IP \
            -e SPRING_PROFILES_ACTIVE=test \
            -e SPRING_DATASOURCE_URL=jdbc:postgresql://database:5432/daily_report_tool_test \
            -e SPRING_DATASOURCE_USERNAME=test_user \
            -e SPRING_DATASOURCE_PASSWORD=test_password \
            -e SPRING_DATASOURCE_DRIVER=org.postgresql.Driver \
            -e HIBERNATE_DIALECT=org.hibernate.dialect.PostgreSQLDialect \
            daily-report-backend:test
          
          # 起動待機とログ確認
          echo "=== 起動待機中（60秒） ==="
          sleep 30
          
          echo "=== コンテナログ確認 ==="
          docker logs test-container
          
          # ヘルスチェックエンドポイントテスト（PostgreSQL接続確認）
          echo "=== ヘルスチェック ==="
          for i in {1..3}; do
            echo "試行 $i/3:"
            if curl -f http://localhost:8080/actuator/health; then
              echo "✅ ヘルスチェック成功"
              break
            else
              echo "❌ ヘルスチェック失敗"
              sleep 10
            fi
          done
          
          # 最終ログ確認
          echo "=== 最終ログ ==="
          docker logs test-container
          
          # コンテナ停止
          docker stop test-container || echo "Container already stopped"

      - name: Scan Docker image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'daily-report-backend:test'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ==========================================
  # Job 4: PR検証結果サマリー
  # ==========================================
  pr-validation-summary:
    name: PR Validation Summary
    runs-on: ubuntu-latest
    needs: [code-quality, test, docker-build-test]
    if: always()
    permissions:
      pull-requests: write
      contents: read
    
    steps:
      - name: Check all jobs status
        run: |
          echo "Code Quality: ${{ needs.code-quality.result }}"
          echo "Tests: ${{ needs.test.result }}"
          echo "Docker Build: ${{ needs.docker-build-test.result }}"
          
          if [[ "${{ needs.code-quality.result }}" != "success" ]] || \
             [[ "${{ needs.test.result }}" != "success" ]] || \
             [[ "${{ needs.docker-build-test.result }}" != "success" ]]; then
            echo "❌ PR validation failed"
            exit 1
          else
            echo "✅ All PR validations passed"
          fi

      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { needs } = context.payload.workflow_run || context.payload;
            const success = needs && Object.values(needs).every(job => job.result === 'success');
            
            const comment = success 
              ? '✅ **Backend CI検証完了** - すべてのチェックが成功しました！\n\n- コード品質チェック: ✅\n- テスト実行: ✅\n- Dockerビルド: ✅\n\nmainブランチへのマージ準備が完了しています。'
              : '❌ **Backend CI検証失敗** - 修正が必要です。\n\n詳細は[Actions](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})を確認してください。';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });