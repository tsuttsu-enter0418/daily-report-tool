# Backend CI Pipeline - Pull Request時の検証
name: Backend CI

on:
    pull_request:
        paths:
            - "backend/**"
            - ".github/workflows/backend-*.yml"
        branches: [main, develop]

env:
    JAVA_VERSION: "17"
    MAVEN_OPTS: "-Xmx3072m"

jobs:
    # ==========================================
    # Job 1: コード品質・セキュリティ検証
    # ==========================================
    code-quality:
        name: Code Quality & Security
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0 # SonarQube用の履歴取得

            - name: Set up JDK ${{ env.JAVA_VERSION }}
              uses: actions/setup-java@v4
              with:
                  java-version: ${{ env.JAVA_VERSION }}
                  distribution: "temurin"

            - name: Cache Maven dependencies
              uses: actions/cache@v4
              with:
                  path: ~/.m2
                  key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
                  restore-keys: ${{ runner.os }}-m2

            - name: Compile and validate
              working-directory: ./backend
              run: |
                  ./mvnw clean compile
                  ./mvnw validate

            - name: Run Checkstyle
              working-directory: ./backend
              run: ./mvnw checkstyle:check

            - name: Security vulnerability scan
              working-directory: ./backend
              run: ./mvnw org.owasp:dependency-check-maven:check

            - name: SonarQube analysis
              working-directory: ./backend
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
              run: |
                  ./mvnw sonar:sonar \
                    -Dsonar.projectKey=daily-report-tool-backend \
                    -Dsonar.host.url=https://sonarcloud.io \
                    -Dsonar.organization=your-org

    # ==========================================
    # Job 2: ユニット・統合テスト
    # ==========================================
    test:
        name: Unit & Integration Tests
        runs-on: ubuntu-latest
        permissions:
            checks: write
            pull-requests: write
            contents: read

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up JDK ${{ env.JAVA_VERSION }}
              uses: actions/setup-java@v4
              with:
                  java-version: ${{ env.JAVA_VERSION }}
                  distribution: "temurin"

            - name: Cache Maven dependencies
              uses: actions/cache@v4
              with:
                  path: ~/.m2
                  key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
                  restore-keys: ${{ runner.os }}-m2

            - name: Run Unit Tests
              working-directory: ./backend
              env:
                  SPRING_PROFILES_ACTIVE: test
              run: |
                  ./mvnw test \
                    -Dspring.jpa.hibernate.ddl-auto=create-drop \
                    -Djunit.jupiter.execution.parallel.enabled=false

            - name: debug jacco exist
              working-directory: ./backend
              if: always()
              run: |
                  echo "--- Listing files in target/site/jacoco/ ---"
                  ls -al target/site/jacoco/ || true
                  echo "--- Listing jacoco.exec data file ---"
                  ls -al target/jacoco.exec || true

            - name: Run Integration Tests
              working-directory: ./backend
              env:
                  SPRING_PROFILES_ACTIVE: test
              run: |
                  ./mvnw verify \
                    -Dspring.jpa.hibernate.ddl-auto=create-drop \
                    -Dtest=**/integration/**/*Test

            # - name: Generate Test Reports
            #   working-directory: ./backend
            #   if: always()
            #   run: ./mvnw jacoco:report

            - name: Upload Test Results
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: test-results
                  path: |
                      backend/target/surefire-reports/
                      backend/target/failsafe-reports/
                      backend/target/site/jacoco/

            - name: Publish Test Results
              uses: dorny/test-reporter@v1
              if: always()
              with:
                  name: JUnit Test Results
                  path: "backend/target/surefire-reports/*.xml"
                  reporter: java-junit

            - name: Code Coverage Comment
              if: github.event_name == 'pull_request'
              uses: 5monkeys/cobertura-action@master
              with:
                  path: backend/target/site/jacoco/jacoco.xml
                  repo_token: ${{ secrets.GITHUB_TOKEN }}
                  minimum_coverage: 80

    # ==========================================
    # TODO: Job 3: Dockerイメージビルド検証（将来実装）
    # ==========================================
    # 課題: GitHub Actions環境でのDockerコンテナ ⇔ PostgreSQL接続問題
    # 解決策:
    #   1. Docker Compose使用によるサービス間通信
    #   2. 専用ネットワーク構築とDNS設定
    #   3. Kubernetes環境での検証
    #
    # docker-build-test:
    #   name: Docker Build Validation
    #   runs-on: ubuntu-latest
    #   needs: [code-quality, test]
    #
    #   services:
    #     postgres:
    #       image: postgres:17
    #       env:
    #         POSTGRES_DB: daily_report_tool_test
    #         POSTGRES_USER: test_user
    #         POSTGRES_PASSWORD: test_password
    #       options: >-
    #         --health-cmd pg_isready
    #         --health-interval 10s
    #         --health-timeout 5s
    #         --health-retries 5
    #       ports:
    #         - 5432:5432
    #
    #   steps:
    #     - name: Checkout code
    #       uses: actions/checkout@v4
    #
    #     - name: Set up Docker Buildx
    #       uses: docker/setup-buildx-action@v3
    #
    #     - name: Build Docker image (test only)
    #       working-directory: ./backend
    #       run: |
    #         docker build \
    #           --target production \
    #           --tag daily-report-backend:test \
    #           --cache-from type=gha \
    #           --cache-to type=gha,mode=max \
    #           .
    #
    #     - name: Test Docker image with PostgreSQL
    #       run: |
    #         # TODO: ネットワーク設定・DB接続問題の解決
    #         echo "Docker Build Validation - 将来実装予定"
    #
    #     - name: Scan Docker image for vulnerabilities
    #       uses: aquasecurity/trivy-action@master
    #       with:
    #         image-ref: 'daily-report-backend:test'
    #         format: 'sarif'
    #         output: 'trivy-results.sarif'
    #
    #     - name: Upload Trivy scan results
    #       uses: github/codeql-action/upload-sarif@v3
    #       if: always()
    #       with:
    #         sarif_file: 'trivy-results.sarif'

    # ==========================================
    # Job 4: PR検証結果サマリー
    # ==========================================
    pr-validation-summary:
        name: PR Validation Summary
        runs-on: ubuntu-latest
        # docker起動テストはToDo
        needs: [code-quality, test]
        if: always()
        permissions:
            pull-requests: write
            contents: read

        steps:
            - name: Check all jobs status
              run: |
                  echo "Code Quality: ${{ needs.code-quality.result }}"
                  echo "Tests: ${{ needs.test.result }}"

                  if [[ "${{ needs.code-quality.result }}" != "success" ]] || \
                     [[ "${{ needs.test.result }}" != "success" ]] || \
                    echo "❌ PR validation failed"
                    exit 1
                  else
                    echo "✅ All PR validations passed"
                  fi

            - name: Comment PR
              if: github.event_name == 'pull_request'
              uses: actions/github-script@v7
              with:
                  script: |
                      const { needs } = context.payload.workflow_run || context.payload;
                      const success = needs && Object.values(needs).every(job => job.result === 'success');

                      const comment = success
                        ? '✅ **Backend CI検証完了** - すべてのチェックが成功しました！\n\n- コード品質チェック: ✅\n- テスト実行: ✅\n- Dockerビルド: ✅\n\nmainブランチへのマージ準備が完了しています。'
                        : '❌ **Backend CI検証失敗** - 修正が必要です。\n\n詳細は[Actions](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})を確認してください。';

                      github.rest.issues.createComment({
                        issue_number: context.issue.number,
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        body: comment
                      });
